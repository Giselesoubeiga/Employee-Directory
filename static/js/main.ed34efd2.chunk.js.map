{"version":3,"sources":["components/Search.js","components/EmployeesList.js","components/Main.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","className","type","onChange","this","searchHandleInput","id","placeholder","React","Component","EmployeesList","state","onClick","orderByName","scope","employeesList","map","user","key","email","src","picture","medium","name","title","first","last","phone","dob","age","Main","e","setState","inputContent","target","value","console","log","filtredEmployees2","employees","filter","employee","toLowerCase","indexOf","filtredEmployees","order","elements","sort","a","b","axios","get","then","response","data","results","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed34efd2.chunk.js","sourcesContent":["/* eslint-disable no-useless-constructor */\r\nimport React from \"react\"\r\n\r\n\r\nclass Search extends React.Component{\r\n\r\n    constructor(props){\r\n        \r\n        super(props);\r\n        \r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"container md-form active-cyan active-cyan-2 mb-3 \">\r\n        <input type=\"text\" onChange={this.props.searchHandleInput} className=\"form-control\" id=\"inputSearch\" placeholder=\"Search\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default Search","/* eslint-disable no-undef */\r\n/* eslint-disable jsx-a11y/anchor-has-content */\r\n/* eslint-disable jsx-a11y/alt-text */\r\nimport React from \"react\";\r\n\r\n\r\nclass EmployeesList extends React.Component {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n      \r\n    };\r\n    \r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <table className=\"table\">\r\n          <thead className=\"thead-dark\">\r\n            <tr  onClick ={this.props.orderByName}>\r\n              <th scope=\"col\">Image</th>\r\n              <th scope=\"col\">Name</th>\r\n              <th scope=\"col\">Phone</th>\r\n              <th scope=\"col\">Email</th>\r\n              <th scope=\"col\">Age</th>\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n            {this.props.employeesList.map((user) => (\r\n              <tr key={user.email}>\r\n                <th scope=\"row\">\r\n                  <img src={user.picture.medium} />{\" \"}\r\n                </th>\r\n\r\n                <td>\r\n                  {user.name.title +\r\n                    \" \" +\r\n                    user.name.first +\r\n                    \" \" +\r\n                    user.name.last}{\" \"}\r\n                </td>\r\n                <td>{user.phone}</td>\r\n\r\n                <td>{user.email}</td>\r\n\r\n                <td>{user.dob.age} </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmployeesList;\r\n","import React from \"react\";\r\nimport Search from \"./Search\";\r\nimport Employee from \"./EmployeesList\";\r\nimport axios from \"axios\";\r\n\r\nclass Main extends React.Component{\r\n    constructor(props){\r\n        \r\n        super(props);\r\n        this.state={\r\n            order:\"\",\r\n            employees:[],\r\n            filtredEmployees:[],\r\n            inputContent:\"\",\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios\r\n          .get(\"https://randomuser.me/api/?results=200&nat=us\")\r\n          .then((response) => {\r\n            console.log(response.data.results);\r\n           \r\n            this.setState({\r\n                filtredEmployees:response.data.results,\r\n              employees: response.data.results,\r\n            });\r\n          });\r\n      }\r\n\r\n\r\n      searchHandleInput=(e)=>{ \r\n          this.setState({inputContent:e.target.value})\r\n          console.log(e.target.value)\r\n\r\n\r\n          const newFiltredEmployees= this.state.employees\r\n\r\n          const filtredEmployees2= newFiltredEmployees.filter(employee => employee.name.first.toLowerCase().indexOf(this.state.inputContent.toLowerCase()) > -1\r\n          )\r\n\r\n        this.setState({\r\n            filtredEmployees:filtredEmployees2,\r\n        });\r\n\r\n      }\r\n\r\n      orderByName =()=>{\r\n        if (this.state.order ===\"asc\"){\r\n          let orderEmployee= this.state.filtredEmployees\r\n         let elements = orderEmployee.sort((a,b)=> a.name.first>b.name.first?-1:1)\r\n          this.setState({filtredEmployees:elements,order:\"desc\"})\r\n        }else {\r\n          let orderEmployee= this.state.filtredEmployees\r\n        let elements = orderEmployee.sort((a,b)=> a.name.first>b.name.first? 1:-1)\r\n        this.setState({filtredEmployees:elements,order:\"asc\"})\r\n        }\r\n      }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"p-5\">\r\n                <Search searchHandleInput={this.searchHandleInput}/>\r\n                <Employee employeesList={this.state.filtredEmployees} orderByName={this.orderByName}/>\r\n\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\n}\r\n\r\nexport default Main\r\n\r\n","import React from \"react\"\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className='justify-content-md-center'>\r\n            <h1>Employee Directory</h1>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Main from \"./components/Main\"\nimport Header from \"./components/Header\"\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n    <Header/>\n    <Main/>\n    </div>\n  );\n}\n\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}